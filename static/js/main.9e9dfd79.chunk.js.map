{"version":3,"sources":["../../src/index.js","../../node_modules/style-inject/dist/style-inject.es.js","App.js","_examples.js","index.js"],"names":["classnames","Array","arguments","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","_attrs","EdiText","props","e","_this","submitOnEnter","inputProps","isEnter","some","keyCode","c","code","handleSave","preventDefault","onKeyDown","setState","valid","value","target","editing","state","savedValue","onCancel","onEditingStart","onSave","validation","onValidationFail","saveButtonClassName","saveButtonContent","cancelButtonClassName","editContainerClassName","viewContainerClassName","cancelButtonContent","validationMessage","hint","hideIcons","buttonsAlign","inputElem","_renderInput","saveButtonDefaultClasses","styles","saveButtonClass","cancelButtonDefaultClasses","cancelButtonClass","editContainerClass","buttonsContainerClass","React","className","editext","saveButton","onClick","handleCancel","viewProps","editButtonClassName","editButtonContent","editOnViewClick","showButtonsOnHover","editButtonDefaultClasses","editButtonClass","viewContainerClass","viewClickHandler","handleActivateEditMode","undefined","createRef","input","Component","prevProps","_prevState","nextState","this","Object","keys","length","onChange","handleInputChange","autoFocus","handleEnter","mode","_renderEditingMode","_renderViewMode","clsName","mainContainerClassName","defaultProps","propTypes","PropTypes","object","string","isRequired","node","func","oneOf","any","bool","StyledEdiText","styled","App","logs","val","console","log","handleValidationFail","textValue","window","alert","marginRight","href","data-size","data-show-count","aria-label","id","language","v","marginTop","overflowX","height","map","i","key","padding","placeholder","outline","minWidth","rows","backgroundColor","color","fontWeight","width","name","borderRadius","toLowerCase","indexOf","min","max","Date","toLocaleString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9e9dfd79.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './styles.css'\n\nfunction classnames() {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n  */\n  return Array(...arguments).filter(a => a).join(' ')\n}\n\nconst _attrs = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint'\n}\n\nexport default class EdiText extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editing: props.editing,\n      valid: true,\n      value: props.value || '',\n      savedValue: ''\n    }\n    this.saveButton = React.createRef()\n    this.input = React.createRef()\n  }\n\n  componentDidUpdate(prevProps, _prevState) {\n    const nextState = {}\n    if (this.props.value !== undefined && prevProps.value !== this.props.value) {\n      nextState.value = this.props.value\n    }\n\n    if (\n      prevProps.editing !== undefined &&\n      prevProps.editing !== this.props.editing\n    ) {\n      nextState.editing = this.props.editing\n    }\n\n    if (Object.keys(nextState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(nextState)\n    }\n  }\n\n  handleEnter = e => {\n    const { submitOnEnter, inputProps } = this.props\n    const isEnter = [13, 'Enter'].some(c => e.keyCode === c || e.code === c)\n    isEnter && submitOnEnter && this.handleSave()\n    isEnter && e.preventDefault()\n    inputProps.onKeyDown && inputProps.onKeyDown(e) // this sucks.\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      valid: true,\n      value: e.target.value\n    })\n  }\n\n  handleCancel = () => {\n    this.setState(\n      {\n        valid: true,\n        editing: false,\n        value: this.state.savedValue || this.props.value\n      },\n      () => this.props.onCancel(this.state.value, this.props.inputProps)\n    )\n  }\n\n  handleActivateEditMode = () => {\n    this.setState({\n      editing: true\n    }, () => { this.props.onEditingStart(this.state.value) })\n  }\n\n  handleSave = () => {\n    const { onSave, validation, onValidationFail, inputProps } = this.props\n    const isValid = validation(this.state.value)\n    if (!isValid) {\n      return this.setState({ valid: false }, () => {\n        onValidationFail && onValidationFail(this.state.value)\n      })\n    }\n    this.setState(\n      {\n        editing: false,\n        savedValue: this.state.value\n      },\n      () => onSave(this.state.savedValue, inputProps)\n    )\n  }\n\n  _renderInput() {\n    if (this.props.type === 'textarea') {\n      return (\n        <textarea\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={_attrs.input}\n          {...this.props.inputProps}\n          value={this.state.value}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    } else {\n      return (\n        <input\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={_attrs.input}\n          {...this.props.inputProps}\n          onKeyDown={this.handleEnter}\n          value={this.state.value}\n          type={this.props.type}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    }\n  }\n\n  _renderEditingMode = () => {\n    const {\n      saveButtonClassName,\n      saveButtonContent,\n      cancelButtonClassName,\n      editContainerClassName,\n      viewContainerClassName,\n      cancelButtonContent,\n      onValidationFail,\n      validationMessage,\n      hint,\n      hideIcons,\n      buttonsAlign\n    } = this.props\n    const inputElem = this._renderInput()\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const saveButtonClass = saveButtonClassName || saveButtonDefaultClasses\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const cancelButtonClass =\n      cancelButtonClassName || cancelButtonDefaultClasses\n    let editContainerClass = styles.Editext__editing_container\n    if (editContainerClassName) editContainerClass = editContainerClassName\n    if (viewContainerClassName) editContainerClass = viewContainerClassName\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    return (\n      <div>\n        <div className={editContainerClass} editext={_attrs.editContainer}>\n          {buttonsAlign === 'after' && inputElem}\n          <div\n            className={buttonsContainerClass}\n          >\n            <button\n              ref={this.saveButton}\n              editext={_attrs.saveButton}\n              type='button'\n              className={saveButtonClass}\n              onClick={this.handleSave}\n            >\n              {saveButtonContent}\n            </button>\n            <button\n              type='button'\n              editext={_attrs.cancelButton}\n              className={cancelButtonClass}\n              onClick={this.handleCancel}\n            >\n              {cancelButtonContent}\n            </button>\n          </div>\n          {buttonsAlign === 'before' && inputElem}\n        </div>\n        {!this.state.valid && !onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {validationMessage}\n          </div>\n        )}\n        {hint &&\n          <div className={styles.Editext__hint} editext={_attrs.hint}>\n            {hint}\n          </div>}\n      </div>\n    )\n  }\n\n  _renderViewMode = () => {\n    const {\n      viewProps,\n      editButtonClassName,\n      editButtonContent,\n      viewContainerClassName,\n      hideIcons,\n      buttonsAlign,\n      editOnViewClick,\n      showButtonsOnHover\n    } = this.props\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const editButtonClass = editButtonClassName || editButtonDefaultClasses\n    const viewContainerClass = classnames(\n      viewContainerClassName || styles.Editext__view_container,\n      showButtonsOnHover && `${styles.Editext__buttons_showButtonsOnHover}`\n    )\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    const viewClickHandler = editOnViewClick\n      ? this.handleActivateEditMode\n      : undefined\n    return (\n      <div className={viewContainerClass} editext={_attrs.viewContainer}>\n        {buttonsAlign === 'after' && (\n          <div {...viewProps} onClick={viewClickHandler} editext='view'>\n            {this.state.value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type='button'\n            editext={_attrs.editButton}\n            className={editButtonClass}\n            onClick={this.handleActivateEditMode}\n          >\n            {editButtonContent}\n          </button>\n        </div>\n        {buttonsAlign === 'before' && (\n          <div {...viewProps} onClick={viewClickHandler} editext={_attrs.viewContainer}>\n            {this.state.value}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  render() {\n    const mode = this.state.editing\n      ? this._renderEditingMode()\n      : this._renderViewMode()\n    const { mainContainerClassName, className } = this.props\n    const clsName = classnames(\n      mainContainerClassName || styles.Editext__main_container, className\n    )\n    return <div className={clsName}>{mode}</div>\n  }\n}\n\nEdiText.defaultProps = {\n  value: '',\n  type: 'text',\n  validationMessage: 'Invalid Value',\n  validation: _v => true,\n  onEditingStart: _v => null,\n  onCancel: _v => null,\n  inputProps: { onKeyDown: _e => { } },\n  viewProps: {},\n  cancelButtonContent: '',\n  saveButtonContent: '',\n  editButtonContent: '',\n  hideIcons: false,\n  buttonsAlign: 'after',\n  editing: false\n}\n\nEdiText.propTypes = {\n  inputProps: PropTypes.object,\n  viewProps: PropTypes.object,\n  value: PropTypes.string.isRequired,\n  hint: PropTypes.node,\n  validationMessage: PropTypes.node,\n  validation: PropTypes.func,\n  onValidationFail: PropTypes.func,\n  type: PropTypes.oneOf([\n    'text',\n    'textarea',\n    'password',\n    'email',\n    'number',\n    'date',\n    'datetime-local',\n    'time',\n    'month',\n    'url',\n    'week',\n    'tel'\n  ]).isRequired,\n  // Events\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func.isRequired,\n  onEditingStart: PropTypes.func,\n  // classNames\n  className: PropTypes.string,\n  saveButtonClassName: PropTypes.string,\n  editButtonClassName: PropTypes.string,\n  cancelButtonClassName: PropTypes.string,\n  mainContainerClassName: PropTypes.string,\n  editContainerClassName: PropTypes.string,\n  viewContainerClassName: PropTypes.string,\n  // Custom Button Texts\n  cancelButtonContent: PropTypes.any,\n  saveButtonContent: PropTypes.any,\n  editButtonContent: PropTypes.any,\n  hideIcons: PropTypes.bool,\n  buttonsAlign: PropTypes.oneOf(['after', 'before']),\n  editOnViewClick: PropTypes.bool,\n  editing: PropTypes.bool,\n  showButtonsOnHover: PropTypes.bool,\n  submitOnEnter: PropTypes.bool\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { Component } from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport EdiText from 'react-editext'\nimport styled from 'styled-components'\nimport * as examples from './_examples'\n\nconst StyledEdiText = styled(EdiText)`\n  button {\n    border-radius: 5px;\n  }\n  button[editext=\"edit-button\"] {\n    color: #000;\n    width: 50px;\n  }\n  button[editext=\"save-button\"] {\n    width: 50px;\n    &:hover {\n      background: greenyellow;\n    }\n  }\n  button[editext=\"cancel-button\"] {\n    &:hover {\n      background: crimson;\n      color: #fff;\n    }\n  }\n  input, textarea {\n    background: #1D2225;\n    color: #F4C361;\n    font-weight: bold;\n    border-radius: 5px;\n  }\n  div[editext=\"view-container\"], div[editext=\"edit-container\"] {\n    background: #6293C3;\n    padding: 15px;\n    border-radius: 5px;\n    color: #fff;\n  }\n`\n\nexport default class App extends Component {\n  state = { editing: false, logs: [] }\n\n  handleSave = (val, inputProps) => {\n    console.log('Edited Value -> ', val)\n    console.log('Edited input props -> ', inputProps)\n  }\n\n  handleValidationFail = textValue => {\n    window.alert(\n      `The text <${textValue}> is not valid.\\nYou shall not use the word SMITH here!!!`\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <section className='hero is-warning'>\n          <div className='hero-body'>\n            <div className='container'>\n              <h1 className='title'>React EdiText</h1>\n              <h2 className='subtitle'>\n                Editable Text Component for React Applications\n              </h2>\n              <span style={{ marginRight: 5 }}>\n                <a\n                  className='github-button'\n                  href='https://github.com/alioguzhan/react-editext'\n                  data-size='large'\n                  data-show-count='true'\n                  aria-label='Star alioguzhan/react-editext on GitHub'\n                >\n                  Star\n                </a>\n              </span>\n              <span>\n                <a\n                  className='github-button'\n                  href='https://github.com/alioguzhan/react-editext/fork'\n                  data-size='large'\n                  data-show-count='true'\n                  aria-label='Fork alioguzhan/react-editext on GitHub'\n                >\n                  Fork\n                </a>\n              </span>\n            </div>\n          </div>\n        </section>\n        <div className='container'>\n          <div className='tile is-parent is-vertical is-12'>\n            <p>\n              <strong>EdiText</strong> is a React component that converts your\n              text into editable content. Below you can see some examples.\n            </p>\n            <p>\n              For installation and available props please see the\n              <a href='https://github.com/alioguzhan/react-editext'>\n                {' '}\n                repository page\n              </a>\n              .\n            </p>\n          </div>\n          <div className='tile is-parent is-vertical is-10' id='default-props'>\n            <div className='subtitle'>\n              <a href='#default-props'>Default Props</a>\n            </div>\n            <p className='content'>\n              This is the default usage without custom props.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example1}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  value='What is real? How do you define real?'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div className='tile is-parent is-vertical is-10' id='styled-components'>\n            <div className='subtitle'>\n              <a href='#styled-components'>Styling with styled-components</a>\n            </div>\n            <p className='content'>\n            You can style the EdiText with <code>styled-components</code>.\n            You can target internal elements by their types (and by order maybe?).\n            </p>\n            <div className='columns'>\n              <div className='column'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example20}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <StyledEdiText\n                  type='text'\n                  value='The honor is still mine.'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div className='tile is-parent is-vertical is-10' id='events'>\n            <div className='subtitle'>\n              <a href='#events'>Events</a>\n            </div>\n            <p className='content'>\n              You can listen events when user cancels, saves or starts editing.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example17}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column is-half'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  onCancel={v => this.setState({\n                    logs: [...this.state.logs, `CANCELLED: ${v}`]\n                  })}\n                  onEditingStart={v => this.setState({\n                    logs: [...this.state.logs, `EDITING STARTED: ${v}`]\n                  })}\n                  onSave={v => this.setState({\n                    logs: [...this.state.logs, `SAVED: ${v}`]\n                  })}\n                  value={\"You've been living in a dream world, Neo.\"}\n                />\n                <div className='subtitle' style={{ marginTop: 10 }}>\n                  Console\n                </div>\n                <pre style={{ overflowX: 'scroll', height: 200 }}>\n                  {this.state.logs.map((e, i) => (\n                    <p key={i}>{e}</p>\n                  ))}\n                </pre>\n                <button\n                  className='button is-small'\n                  onClick={() => this.setState({ logs: [] })}\n                >\n                  clear the logs\n                </button>\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div className='tile is-parent is-vertical is-10' id='show-on-hover'>\n            <div className='subtitle'>\n              <a href='#show-on-hover'>Show Button on Hover</a>\n            </div>\n            <p className='content'>\n              Pass <code>showButtonsOnHover</code> prop if you want to display\n              the action buttons only when the text hovered by the user.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example18}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <div className='custom-wrapper' style={{ padding: 10 }}>\n                  <EdiText\n                    type='text'\n                    showButtonsOnHover\n                    value='What is real? How do you define real?'\n                    onSave={this.handleSave}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='show-a-hint-message'\n          >\n            <div className='subtitle'>\n              <a href='#show-a-hint-message'>Show a Hint Message</a>\n            </div>\n            <p className='content'>\n              If you don't want to use another library and just want to show a\n              simple message as hint, use the <code>hint</code> prop.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example8}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <p>What is the main difference between React and Angular?</p>\n                <div className='custom-wrapper'>\n                  <EdiText\n                    type='text'\n                    hint='React is not a framework, it is a library.'\n                    viewProps={{\n                      className: 'react-answer-1'\n                    }}\n                    value='I am not sure...'\n                    onSave={this.handleSave}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='custom-element-as-hint-message'\n          >\n            <div className='subtitle'>\n              <a href='#custom-element-as-hint-message'>\n                Custom Element as Hint Message\n              </a>\n            </div>\n            <p className='content'>\n              In fact, you can render any valid React Element in hint section.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example10}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <p>\n                  What is the difference between React Native and PhoneGap ?\n                </p>\n                <div className='custom-wrapper'>\n                  <EdiText\n                    type='text'\n                    hint={\n                      <span className='custom-hint'>\n                        <i>PhoneGap is a hybrid technology, not native.</i>\n                      </span>\n                    }\n                    viewProps={{\n                      className: 'react-answer-1'\n                    }}\n                    value='I am not sure...'\n                    onSave={this.handleSave}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='textarea-for-editing-input'\n          >\n            <div className='subtitle'>\n              <a href='#textarea-for-editing-input'>\n                Textarea for Editing Input\n              </a>\n            </div>\n            <p className='content'>\n              You can use <code>{'<textarea>'}</code> for editing if your\n              content is too long. Also you can specify custom class name and\n              other props for the input element. Since this page has built with\n              Bulma.io, we passed <code>textarea</code>\n              as class name.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example2}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='textarea'\n                  inputProps={{\n                    className: 'textarea',\n                    placeholder: 'Type your content here',\n                    style: {\n                      outline: 'none',\n                      minWidth: 'auto'\n                    },\n                    rows: 5\n                  }}\n                  value=\"How do you define real? If you're talking about what you can feel, what you can smell,\n                  what you can taste and see, then real is simply electrical signals interpreted by your brain\"\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='custom-button-contents'\n          >\n            <div className='subtitle'>\n              <a href='#custom-button-contents'>Custom Button Contents</a>\n            </div>\n            <p className='content'>\n              By default, Action buttons have no titles. They are just some\n              simple icons. But you can append{' '}\n              <strong>any valid element</strong> next to those icons. See the\n              example below.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example3}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  saveButtonContent='Apply'\n                  cancelButtonContent={<strong>Cancel</strong>}\n                  editButtonContent='Edit'\n                  value='Why, Mr. Anderson? Why? Why do you persist?'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='removing-default-icons'\n          >\n            <div className='subtitle'>\n              <a href='#removing-default-icons'>Removing Default Icons</a>\n            </div>\n            <p className='content'>\n              If you prefer to disable default icons, you can set{' '}\n              <code>hideIcons</code> prop to <code>true</code>. Don't forget to\n              set a content or title for your actions buttons. They will have\n              empty labels otherwise.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example12}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  saveButtonContent='Apply'\n                  cancelButtonContent={<strong>Cancel</strong>}\n                  editButtonContent='Edit'\n                  value='Why, Mr. Anderson? Why? Why do you persist?'\n                  hideIcons={true}\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='custom-classes-for-buttons'\n          >\n            <div className='subtitle'>\n              <a href='#custom-classes-for-buttons'>\n                Custom HTML Classes for Buttons\n              </a>\n            </div>\n            <p className='content'>\n              You can use your own classes for action buttons [Edit - Save -\n              Cancel]\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example11}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  saveButtonContent='Apply'\n                  cancelButtonContent='Cancel'\n                  saveButtonClassName='custom-save-button'\n                  editButtonClassName='custom-edit-button'\n                  cancelButtonClassName='custom-cancel-button'\n                  editButtonContent='Edit'\n                  value='Why, Mr. Anderson? Why? Why do you persist?'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='custom-classes-for-containers'\n          >\n            <div className='subtitle'>\n              <a href='#custom-classes-for-containers'>\n                Custom HTML Classes for Containers\n              </a>\n            </div>\n            <p className='content'>\n              You can use your own classes for main, edit and view containers.\n            </p>\n            <p className='content'>\n              <code>viewContainerClassName</code> and{' '}\n              <code>editContainerClassName</code>\n              have usually same styles. It is provided to assign different class\n              names for both. Yet you can omit one of them if you specify other\n              one. In that case, the specified class name will be applied to\n              both props.\n            </p>\n            <p className='content'>\n              There is also <code>mainContainerClassName</code> prop which\n              allows you to apply top-level styles to the EdiText component. But\n              you probably don't need this.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example13}\n                </SyntaxHighlighter>\n                <p>With some style:</p>\n                <SyntaxHighlighter language='css'>\n                  {examples.example13Style}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  viewContainerClassName='my-custom-view-wrapper'\n                  type='textarea'\n                  inputProps={{\n                    rows: 5\n                  }}\n                  saveButtonContent='Apply'\n                  cancelButtonContent={<strong>Cancel</strong>}\n                  editButtonContent='Edit This Quote'\n                  value=\"How do you define real? If you're talking about what you can feel, what you can smell,\n                  what you can taste and see, then real is simply electrical signals interpreted by your brain\"\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='custom-props-for-input-element'\n          >\n            <div className='subtitle'>\n              <a href='#custom-props-for-input-element'>\n                Custom Props for Input Element\n              </a>\n            </div>\n            <p className='content'>\n              It is likely that you will want to add some props to input\n              element. You can pass any valid HTML attribute to the input\n              element via <code>inputProps</code>.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example7}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <p>\n                  What was the Morpheus' answer when Neo say 'It was an honor,\n                  sir' ?\n                </p>\n                <div className='custom-wrapper'>\n                  <EdiText\n                    type='text'\n                    hint='It is from Matrix Revolutions.'\n                    inputProps={{\n                      placeholder: 'Type your answer here',\n                      style: {\n                        backgroundColor: '#233C51',\n                        color: '#E6ECF1',\n                        fontWeight: 500,\n                        width: 250\n                      },\n                      name: 'answer1'\n                    }}\n                    viewProps={{\n                      className: 'custom-view-class'\n                    }}\n                    value='No. The honor is still mine.'\n                    onSave={this.handleSave}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='custom-props-for-text-element'\n          >\n            <div className='subtitle'>\n              <a href='#custom-props-for-text-element'>\n                Custom Props for Text Element\n              </a>\n            </div>\n            <p className='content'>\n              You may want to add some styling to your text content instead of\n              render it as a plain text. To do that you can use\n              <code>viewProps</code> prop. You can pass any valid HTML\n              attribute. These props will be passed to content <code>div</code>.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example6}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  viewProps={{\n                    className: 'my-react-header',\n                    style: { borderRadius: 3 }\n                  }}\n                  value='Hello React!'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='change-buttons-location'\n          >\n            <div className='subtitle'>\n              <a href='#change-buttons-location'>\n                Change the location of action buttons\n              </a>\n            </div>\n            <p className='content'>\n              You may want locate action buttons before the input element\n              instead of after it. Just pass the{' '}\n              <code>buttonsAlign='before'</code> prop. You should be fine.\n              Default value is already `after`. So don't pass anything if you\n              don't want to change this.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example14}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  buttonsAlign='before'\n                  value='What is real? How do you define real?'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div className='tile is-parent is-vertical is-10' id='validation'>\n            <div className='subtitle'>\n              <a href='#validation'>Validate the Content</a>\n            </div>\n            <p className='content'>\n              You can validate the value of input before save. Just pass a\n              function to <code>validation</code> prop. And you also can set a\n              validation message which will appear when validation fails. See\n              the example. Delete some characters from content and try to save\n              it.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example4}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  validationMessage='Please type at least 20 characters.'\n                  validation={val => val.length >= 20}\n                  value='The Matrix has you..'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='custom-validation'\n          >\n            <div className='subtitle'>\n              <a href='#custom-validation'>Custom Validation</a>\n            </div>\n            <p className='content'>\n              EdiText has a very basic validation handling. You will probably\n              want to use an external library to show custom and fancy\n              validation warnings or messages. You can track the validity of\n              input value with\n              <code>onValidationFail</code> prop. Just pass your method to\n              listen and react against validation updates.\n              <strong>\n                Type the word 'Smith' into below input and try to save it.\n              </strong>\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example5}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  validation={val => val.toLowerCase().indexOf('smith') < 0}\n                  onValidationFail={this.handleValidationFail}\n                  inputProps={{\n                    placeholder: \"Don't use the word 'Smith'...\"\n                  }}\n                  value='Why Mr. Anderson? Why? Why? Why?'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div\n            className='tile is-parent is-vertical is-10'\n            id='usage-for-date-values'\n          >\n            <div className='subtitle'>\n              <a href='#usage-for-date-values'>Usage for Date Values</a>\n            </div>\n            <p className='content'>\n              You can use EdiText for date inputs as well. Just type{' '}\n              <code>date</code> to type prop. Other related and types are{' '}\n              <code>datetime-local</code>, <code>time</code>, <code>week</code>,{' '}\n              <code>month</code>\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example9}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='date'\n                  inputProps={{\n                    min: '2000-01-01',\n                    max: '2049-01-01'\n                  }}\n                  hint='All dates are allowed between 2000 and 2049'\n                  value={new Date().toLocaleString()}\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div className='tile is-parent is-vertical is-10' id='edit-on-view-click'>\n            <div className='subtitle'>\n              <a href='#default-props'>Edit on View Click</a>\n            </div>\n            <p className='content'>\n              You may want to activate the editor when the view is clicked on\n              instead of clicking on the edit button. To do that you can use\n              <code>editOnViewClick</code> prop to <code>true</code>.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example15}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  type='text'\n                  onEditingStart={v => console.log('editing started: ', v)}\n                  value='What is real? How do you define real?'\n                  onSave={this.handleSave}\n                  editOnViewClick={true}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div className='tile is-parent is-vertical is-10' id='edit-by-default'>\n            <div className='subtitle'>\n              <a href='#edit-by-default'>Controlled Edit View</a>\n            </div>\n            <p className='content'>\n              You may want the editor to be active by default and/or be controlled externally.\n              To do that you can set <code>editing</code> prop to <code>true</code>.\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example16}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <div>\n                  <button\n                    className='button is-small is-warning'\n                    onClick={() => this.setState({ editing: !this.state.editing })}\n                  >\n                      Toggle Editing Mode\n                  </button>\n                </div>\n                <br />\n                <EdiText\n                  type='text'\n                  value='What is real? How do you define real?'\n                  onSave={this.handleSave}\n                  editing={this.state.editing}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n          <div className='tile is-parent is-vertical is-10' id='submit-on-enter'>\n            <div className='subtitle'>\n              <a href='#submit-on-enter'>Save on Enter</a>\n            </div>\n            <p className='content'>\n              Use this if you want to submit the form when `Enter` is pressed.\n              <br />\n              <strong>Be careful if you have multiple instances of <code>EdiText</code>\n              on the same page.\n              </strong>\n            </p>\n            <div className='columns'>\n              <div className='column is-half'>\n                <SyntaxHighlighter language='javascript'>\n                  {examples.example19}\n                </SyntaxHighlighter>\n              </div>\n              <div className='column'>\n                <div className='subtitle'>Output</div>\n                <EdiText\n                  submitOnEnter\n                  value='The Keymaker'\n                  onSave={this.handleSave}\n                />\n              </div>\n            </div>\n          </div>\n          {/* ============ End of Example ============ */}\n        </div>\n        <footer className='footer' style={{ padding: 20 }}>\n          <div className='content has-text-centered'>\n            <p>\n              <strong>React EdiText</strong> by{' '}\n              <a href='https://github.com/alioguzhan'>Ali Oguzhan Yildiz</a>.\n              The source code is licensed\n              <a href='https://opensource.org/licenses/MIT'> MIT</a>.\n            </p>\n          </div>\n        </footer>\n      </div>\n    )\n  }\n}\n","export const example1 = `import React, { Component } from 'react'\nimport EdiText from 'react-editext'\n\nexport default class App extends Component {\n  onSave = val => {\n    console.log('Edited Value -> ', val)\n  }\n\n  render () {\n    return (\n      <EdiText\n        type='text'\n        value='What is real? How do you define real?'\n        onSave={this.onSave}\n      />\n    )\n  }\n}\n`\nexport const example2 = `<EdiText\n  type='textarea'\n  inputProps={{\n    className: 'textarea',\n    placeholder: 'Type your content here',\n    style: {\n      outline: 'none',\n      minWidth: 'auto'\n    },\n    rows: 5\n  }}\n  value=\"How do you define real? If you're talking about what you can feel, what you can smell,\\\\\n  what you can taste and see, then real is simply electrical signals interpreted by your brain\"\n  onSave={this.onSave}\n/>`\n\nexport const example3 = `<EdiText\n  type=\"textarea\"\n  saveButtonContent=\"Apply\"\n  cancelButtonContent={<strong>Cancel</strong>}\n  editButtonContent=\"Edit\"\n  value=\"Why, Mr. Anderson? Why? Why do you persist?\"\n  onSave={this.onSave}\n/>`\n\nexport const example4 = `<EdiText\n  type=\"text\"\n  validationMessage=\"Please type at least 20 characters.\"\n  validation={val => val.length >= 20}\n  value=\"The Matrix has you..\"\n  onSave={this.onSave}\n/>`\n\nexport const example5 = `export default class App extends Component {\n  onSave = val => {\n    console.log('Edited Value -> ', val)\n  }\n\n  validationFailed = textValue => {\n    alert(\\`The text <\\${textValue}> is not valid.\\nYou shall not use the word SMITH here!!!\\`)\n  }\n\n  render () {\n    return (\n      <EdiText\n        type=\"text\"\n        validation={val => val.toLowerCase().indexOf('smith') < 0}\n        onValidationFail={this.validationFailed}\n        inputProps={{\n          placeholder: \"Don't use the word 'Smith'...\"\n        }}\n        value=\"Why Mr. Anderson? Why? Why? Why?\"\n        onSave={this.onSave}\n      />\n    )\n  }\n}`\n\nexport const example6 = `<EdiText\n  type=\"text\"\n  viewProps={{\n    className: 'my-react-header',\n    style: { borderRadius: 3 }\n  }}\n  value=\"Hello React!\"\n  onSave={this.onSave}\n/>`\n\nexport const example7 = `<EdiText\n  type=\"text\"\n  hint=\"It is from Matrix Revolutions.\"\n  inputProps={{\n    placeholder: 'Type your answer here',\n    style: {\n      backgroundColor: '#233C51',\n      color: '#E6ECF1',\n      fontWeight: 500,\n      width: 250\n    },\n    name: 'answer1'\n  }}\n  viewProps={{\n    className: 'custom-view-class'\n  }}\n  value=\"No. The honor is still mine.\"\n  onSave={this.onSave}\n/>`\n\nexport const example8 = `<EdiText\n  type=\"text\"\n  hint=\"React is not a framework, it is a library.\"\n  viewProps={{\n    className: 'react-answer-1',\n    style: { borderRadius: 3 }\n  }}\n  value=\"I am not sure...\"\n  onSave={this.onSave}\n/>`\n\nexport const example9 = `<EdiText\n  type=\"date\"\n  inputProps={{\n    min: \"2000-01-01\",\n    max: \"2049-01-01\"\n  }}\n  hint=\"All dates are allowed between 2000 and 2049\"\n  value={new Date().toDateString()}\n  onSave={this.onSave}\n/>`\n\nexport const example10 = `<EdiText\n  type=\"text\"\n  hint={\n    <span className=\"custom-hint\">\n      <i>PhoneGap is a hybrid technology, not native.</i>\n    </span>\n  }\n  viewProps={{\n    className: 'react-answer-1',\n  }}\n  value=\"I am not sure...\"\n  onSave={this.onSave}\n/>`\n\nexport const example11 = `<EdiText\n  type=\"text\"\n  saveButtonContent=\"Apply\"\n  cancelButtonContent=\"Cancel\"\n  saveButtonClassName=\"custom-save-button\"\n  editButtonClassName=\"custom-edit-button\"\n  cancelButtonClassName=\"custom-cancel-button\"\n  editButtonContent=\"Edit\"\n  value=\"Why, Mr. Anderson? Why? Why do you persist?\"\n  onSave={this.onSave}\n/>`\n\nexport const example12 = `<EdiText\n  type=\"textarea\"\n  saveButtonContent=\"Apply\"\n  cancelButtonContent={<strong>Cancel</strong>}\n  editButtonContent=\"Edit\"\n  value=\"Why, Mr. Anderson? Why? Why do you persist?\"\n  onSave={this.onSave}\n  hideIcons={true}\n/>`\n\nexport const example13 = `import React, { Component } from 'react'\nimport EdiText from 'react-editext'\n\nexport default class App extends Component {\n  onSave = val => {\n    console.log('Edited Value -> ', val)\n  }\n\n  render () {\n    return (\n      <EdiText\n        viewContainerClassName='my-custom-view-wrapper'\n        type='textarea'\n        inputProps={{\n          rows: 5\n        }}\n        saveButtonContent='Apply'\n        cancelButtonContent={<strong>Cancel</strong>}\n        editButtonContent='Edit This Quote'\n        value=\"How do you define real? If you're talking about what you can feel, what you can smell,\n        what you can taste and see, then real is simply electrical signals interpreted by your brain\"\n        onSave={this.onSave}\n      />\n    )\n  }\n}`\n\nexport const example13Style = `\n.my-custom-view-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.my-custom-view-wrapper div:last-child {\n  /* Here we are styling the button container. */\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  margin-top: 5px;\n}`\nexport const example14 = `import React, { Component } from 'react'\nimport EdiText from 'react-editext'\n\nexport default class App extends Component {\n  onSave = val => {\n    console.log('Edited Value -> ', val)\n  }\n\n  render () {\n    return (\n      <EdiText\n        type='text'\n        buttonsAlign='before'\n        value='What is real? How do you define real?'\n        onSave={this.onSave}\n      />\n    )\n  }\n}\n`\nexport const example15 = `import React, { Component } from 'react'\nimport EdiText from 'react-editext'\n\nexport default class App extends Component {\n  onSave = val => {\n    console.log('Edited Value -> ', val)\n  }\n\n  render () {\n    return (\n      <EdiText\n        type='text'\n        value='What is real? How do you define real?'\n        onSave={this.onSave}\n        editOnViewClick={true}\n      />\n    )\n  }\n}`\n\nexport const example16 = `import React, { Component } from 'react'\nimport EdiText from 'react-editext'\n\nexport default class App extends Component {\n  onSave = val => {\n    console.log('Edited Value -> ', val)\n  }\n\n  render () {\n    return (\n      <div>\n        <button\n          className='button is-small is-warning'\n          onClick={() => {\n            this.setState({ editing: !this.state.editing })\n          }}>\n            Toggle Editing Mode\n        </button>\n        <EdiText\n          type='text'\n          value='What is real? How do you define real?'\n          onSave={this.onSave}\n          editing={this.state.editing}\n        />\n      </div>\n    )\n  }\n}`\n\nexport const example17 = `import React, { Component } from 'react'\nimport EdiText from 'react-editext'\n\nexport default class App extends Component {\n\n  render () {\n    return (\n      <EdiText\n        type='text'\n        onCancel={v => console.log('CANCELLED: ', v}\n        onEditingStart={v => console.log('EDITING STARTED: ', v}\n        onSave={v => console.log('SAVED: ', v}\n        value={\"You've been living in a dream world, Neo.\"}\n      />\n    )\n  }\n}`\n\nexport const example18 = `<EdiText\n  showButtonsOnHover\n  value=\"Why, Mr. Anderson? Why? Why do you persist?\"\n  onSave={this.onSave}\n/>`\n\nexport const example19 = `<EdiText\n  submitOnEnter\n  value=\"The Keymaker\"\n  onSave={this.onSave}\n/>`\n\nexport const example20 = `const StyledEdiText = styled(EdiText)\\`\n  button {\n    border-radius: 5px;\n  }\n  button[editext=\"edit-button\"] {\n    color: #000;\n    width: 50px;\n  }\n  button[editext=\"save-button\"] {\n    width: 50px;\n    &:hover {\n      background: greenyellow;\n    }\n  }\n  button[editext=\"cancel-button\"] {\n    &:hover {\n      background: crimson;\n      color: #fff;\n    }\n  }\n  input, textarea {\n    background: #1D2225;\n    color: #F4C361;\n    font-weight: bold;\n    border-radius: 5px;\n  }\n  div[editext=\"view-container\"], div[editext=\"edit-container\"] {\n    background: #6293C3;\n    padding: 15px;\n    border-radius: 5px;\n    color: #fff;\n}\n\\`\n<StyledEdiText\n  type='text'\n  value='The honor is still mine.'\n  onSave={this.handleSave}\n/>\n`\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}