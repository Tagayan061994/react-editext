{"version":3,"file":"index.es.js","sources":["../src/index.js","../node_modules/style-inject/dist/style-inject.es.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styles from './styles.css'\n\nfunction classnames() {\n  /**\n   * Our simple classnames replica.\n   * This is enough for me.\n  */\n  return Array(...arguments).filter(a => a).join(' ')\n}\n\nconst _attrs = {\n  /**\n   * This is for the end user. You can use below attributes if you want to\n   * style this component with `styled-components` or something like that.\n   * Example notation:\n   * <div class=\"EdiText_Buttons__container_34fgAsdf\" editext=\"button-container\">\n   * Example usage with styled-components:\n\n    const StyledEdiText = styled(EdiText)`\n      button[editext=\"edit-button\"] {\n        color: #000;\n      }\n      button[editext=\"save-button\"] {\n        background:#587C0C;\n        color: #fff;\n      }\n      input, textarea {\n        background: #1D2225;\n        color: #F4C361;\n        font-weight: bold;\n      }\n    `\n   */\n  viewContainer: 'view-container',\n  buttonContainer: 'button-container',\n  editContainer: 'edit-container',\n  editButton: 'edit-button',\n  saveButton: 'save-button',\n  cancelButton: 'cancel-button',\n  input: 'input',\n  hint: 'hint'\n}\n\nexport default class EdiText extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editing: props.editing,\n      valid: true,\n      value: props.value || '',\n      savedValue: ''\n    }\n    this.saveButton = React.createRef()\n    this.input = React.createRef()\n  }\n\n  componentDidUpdate(prevProps, _prevState) {\n    const nextState = {}\n    if (this.props.value !== undefined && prevProps.value !== this.props.value) {\n      nextState.value = this.props.value\n    }\n\n    if (\n      prevProps.editing !== undefined &&\n      prevProps.editing !== this.props.editing\n    ) {\n      nextState.editing = this.props.editing\n    }\n\n    if (Object.keys(nextState).length > 0) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(nextState)\n    }\n  }\n\n  handleEnter = e => {\n    const { submitOnEnter, inputProps } = this.props\n    const isEnter = [13, 'Enter'].some(c => e.keyCode === c || e.code === c)\n    isEnter && submitOnEnter && this.handleSave()\n    isEnter && e.preventDefault()\n    inputProps.onKeyDown && inputProps.onKeyDown(e) // this sucks.\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      valid: true,\n      value: e.target.value\n    })\n  }\n\n  handleCancel = () => {\n    this.setState(\n      {\n        valid: true,\n        editing: false,\n        value: this.state.savedValue || this.props.value\n      },\n      () => this.props.onCancel(this.state.value, this.props.inputProps)\n    )\n  }\n\n  handleActivateEditMode = () => {\n    this.setState({\n      editing: true\n    }, () => { this.props.onEditingStart(this.state.value) })\n  }\n\n  handleSave = () => {\n    const { onSave, validation, onValidationFail, inputProps } = this.props\n    const isValid = validation(this.state.value)\n    if (!isValid) {\n      return this.setState({ valid: false }, () => {\n        onValidationFail && onValidationFail(this.state.value)\n      })\n    }\n    this.setState(\n      {\n        editing: false,\n        savedValue: this.state.value\n      },\n      () => onSave(this.state.savedValue, inputProps)\n    )\n  }\n\n  _renderInput() {\n    if (this.props.type === 'textarea') {\n      return (\n        <textarea\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={_attrs.input}\n          {...this.props.inputProps}\n          value={this.state.value}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    } else {\n      return (\n        <input\n          ref={this.input}\n          className={styles.Editext__input}\n          editext={_attrs.input}\n          {...this.props.inputProps}\n          onKeyDown={this.handleEnter}\n          value={this.state.value}\n          type={this.props.type}\n          onChange={this.handleInputChange}\n          autoFocus={this.state.editing}\n        />\n      )\n    }\n  }\n\n  _renderEditingMode = () => {\n    const {\n      saveButtonClassName,\n      saveButtonContent,\n      cancelButtonClassName,\n      editContainerClassName,\n      viewContainerClassName,\n      cancelButtonContent,\n      onValidationFail,\n      validationMessage,\n      hint,\n      hideIcons,\n      buttonsAlign\n    } = this.props\n    const inputElem = this._renderInput()\n    // calculate save button classes\n    const saveButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__save_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const saveButtonClass = saveButtonClassName || saveButtonDefaultClasses\n    // calculate cancel button classes\n    const cancelButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__cancel_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const cancelButtonClass =\n      cancelButtonClassName || cancelButtonDefaultClasses\n    let editContainerClass = styles.Editext__editing_container\n    if (editContainerClassName) editContainerClass = editContainerClassName\n    if (viewContainerClassName) editContainerClass = viewContainerClassName\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    return (\n      <div>\n        <div className={editContainerClass} editext={_attrs.editContainer}>\n          {buttonsAlign === 'after' && inputElem}\n          <div\n            className={buttonsContainerClass}\n          >\n            <button\n              ref={this.saveButton}\n              editext={_attrs.saveButton}\n              type='button'\n              className={saveButtonClass}\n              onClick={this.handleSave}\n            >\n              {saveButtonContent}\n            </button>\n            <button\n              type='button'\n              editext={_attrs.cancelButton}\n              className={cancelButtonClass}\n              onClick={this.handleCancel}\n            >\n              {cancelButtonContent}\n            </button>\n          </div>\n          {buttonsAlign === 'before' && inputElem}\n        </div>\n        {!this.state.valid && !onValidationFail && (\n          <div className={styles.Editext__validation_message}>\n            {validationMessage}\n          </div>\n        )}\n        {hint &&\n          <div className={styles.Editext__hint} editext={_attrs.hint}>\n            {hint}\n          </div>}\n      </div>\n    )\n  }\n\n  _renderViewMode = () => {\n    const {\n      viewProps,\n      editButtonClassName,\n      editButtonContent,\n      viewContainerClassName,\n      hideIcons,\n      buttonsAlign,\n      editOnViewClick,\n      showButtonsOnHover\n    } = this.props\n    // calculate edit button classes\n    const editButtonDefaultClasses = classnames(\n      `${styles.Editext__button}`,\n      `${styles.Editext__edit_button}`,\n      hideIcons && `${styles.Editext__hide_default_icons}`\n    )\n    const editButtonClass = editButtonClassName || editButtonDefaultClasses\n    const viewContainerClass = classnames(\n      viewContainerClassName || styles.Editext__view_container,\n      showButtonsOnHover && `${styles.Editext__buttons_showButtonsOnHover}`\n    )\n    const buttonsContainerClass = classnames(\n      styles.Editext__buttons_container,\n      buttonsAlign === 'before' && `${styles.Editext__buttons_before_aligned}`,\n      buttonsAlign === 'after' && `${styles.Editext__buttons_after_aligned}`\n    )\n    const viewClickHandler = editOnViewClick\n      ? this.handleActivateEditMode\n      : undefined\n    return (\n      <div className={viewContainerClass} editext={_attrs.viewContainer}>\n        {buttonsAlign === 'after' && (\n          <div {...viewProps} onClick={viewClickHandler} editext='view'>\n            {this.state.value}\n          </div>\n        )}\n        <div className={buttonsContainerClass}>\n          <button\n            type='button'\n            editext={_attrs.editButton}\n            className={editButtonClass}\n            onClick={this.handleActivateEditMode}\n          >\n            {editButtonContent}\n          </button>\n        </div>\n        {buttonsAlign === 'before' && (\n          <div {...viewProps} onClick={viewClickHandler} editext={_attrs.viewContainer}>\n            {this.state.value}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  render() {\n    const mode = this.state.editing\n      ? this._renderEditingMode()\n      : this._renderViewMode()\n    const { mainContainerClassName, className } = this.props\n    const clsName = classnames(\n      mainContainerClassName || styles.Editext__main_container, className\n    )\n    return <div className={clsName}>{mode}</div>\n  }\n}\n\nEdiText.defaultProps = {\n  value: '',\n  type: 'text',\n  validationMessage: 'Invalid Value',\n  validation: _v => true,\n  onEditingStart: _v => null,\n  onCancel: _v => null,\n  inputProps: { onKeyDown: _e => { } },\n  viewProps: {},\n  cancelButtonContent: '',\n  saveButtonContent: '',\n  editButtonContent: '',\n  hideIcons: false,\n  buttonsAlign: 'after',\n  editing: false\n}\n\nEdiText.propTypes = {\n  inputProps: PropTypes.object,\n  viewProps: PropTypes.object,\n  value: PropTypes.string.isRequired,\n  hint: PropTypes.node,\n  validationMessage: PropTypes.node,\n  validation: PropTypes.func,\n  onValidationFail: PropTypes.func,\n  type: PropTypes.oneOf([\n    'text',\n    'textarea',\n    'password',\n    'email',\n    'number',\n    'date',\n    'datetime-local',\n    'time',\n    'month',\n    'url',\n    'week',\n    'tel'\n  ]).isRequired,\n  // Events\n  onCancel: PropTypes.func,\n  onSave: PropTypes.func.isRequired,\n  onEditingStart: PropTypes.func,\n  // classNames\n  className: PropTypes.string,\n  saveButtonClassName: PropTypes.string,\n  editButtonClassName: PropTypes.string,\n  cancelButtonClassName: PropTypes.string,\n  mainContainerClassName: PropTypes.string,\n  editContainerClassName: PropTypes.string,\n  viewContainerClassName: PropTypes.string,\n  // Custom Button Texts\n  cancelButtonContent: PropTypes.any,\n  saveButtonContent: PropTypes.any,\n  editButtonContent: PropTypes.any,\n  hideIcons: PropTypes.bool,\n  buttonsAlign: PropTypes.oneOf(['after', 'before']),\n  editOnViewClick: PropTypes.bool,\n  editing: PropTypes.bool,\n  showButtonsOnHover: PropTypes.bool,\n  submitOnEnter: PropTypes.bool\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"],"names":["classnames","Array","arguments","filter","a","join","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","_attrs","EdiText","props","e","_this","submitOnEnter","inputProps","isEnter","some","c","keyCode","code","handleSave","preventDefault","onKeyDown","setState","valid","value","target","editing","state","savedValue","onCancel","onEditingStart","onSave","validation","onValidationFail","saveButtonClassName","saveButtonContent","cancelButtonClassName","editContainerClassName","viewContainerClassName","cancelButtonContent","validationMessage","hint","hideIcons","buttonsAlign","inputElem","_renderInput","saveButtonDefaultClasses","styles","saveButtonClass","cancelButtonDefaultClasses","cancelButtonClass","editContainerClass","buttonsContainerClass","React","className","editext","saveButton","onClick","handleCancel","viewProps","editButtonClassName","editButtonContent","editOnViewClick","showButtonsOnHover","editButtonDefaultClasses","editButtonClass","viewContainerClass","viewClickHandler","handleActivateEditMode","undefined","createRef","input","Component","prevProps","_prevState","nextState","this","Object","keys","length","onChange","handleInputChange","autoFocus","handleEnter","mode","_renderEditingMode","_renderViewMode","mainContainerClassName","clsName","defaultProps","_v","_e","propTypes","PropTypes","object","string","isRequired","node","func","oneOf","any","bool"],"mappings":"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"}